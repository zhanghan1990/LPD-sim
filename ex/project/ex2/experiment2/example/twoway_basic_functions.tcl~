#
# Dump the statistics of a (unidirectional) link periodically 
#
proc linkDump {link binteg pinteg qmon interval name linkfile util loss queue buf_bytes} {
global ns
        set now_time [$ns now]
        $ns at [expr $now_time + $interval] "linkDump $link $binteg $pinteg $qmon $interval $name $linkfile $util $loss $queue $buf_bytes"
        set bandw [[$link link] set bandwidth_]
        set queue_bd [$binteg set sum_]
        set abd_queue [expr $queue_bd/[expr 1.*$interval]]
        set queue_pd [$pinteg set sum_]
        set apd_queue [expr $queue_pd/[expr 1.*$interval]]
        set utilz [expr 8*[$qmon set bdepartures_]/[expr 1.*$interval*$bandw]]    

        if {[$qmon set parrivals_] != 0} {
                set drprt [expr [$qmon set pdrops_]/[expr 1.*[$qmon set parrivals_]]]
        } else {
                set drprt 0
        }
	if {$utilz != 0} {;	# compute avg queueing delay based on Little's formula
		set a_delay [expr ($abd_queue*8*1000)/($utilz*$bandw)]
	} else {
		set a_delay 0.
	}
#        puts stdout [format "\nTime interval: %.2f-%.2f" [expr [$ns now] - $interval] [$ns now]]
        puts $linkfile [format "\nTime interval: %.5f-%.5f" [expr [$ns now] - $interval] [$ns now]]
        puts $linkfile [format "Link %s: Utiliz=%.3f LossRate=%.3f AvgDelay=%.2fms AvgQueue(P)=%.2f AvgQueue(B)=%.0f" $name $utilz $drprt $a_delay $apd_queue $abd_queue]
    
        #loss_sample, util_sample and queue_sample
        set av_qsize [expr [expr $abd_queue * 100] / $buf_bytes]
        set utilz [expr $utilz * 100]
        set drprt [expr $drprt * 100]

    	set buf_pkts [expr $buf_bytes / 1000]

#        puts "Buffer Size (bytes) = $buf_bytes"
#        puts "Buffer Size (pkts) = $buf_pkts"

        puts $util [format "%.5f   %.3f" [$ns now] $utilz]
	puts $loss [format "%.5f   %.3f" [$ns now] $drprt]
	puts $queue [format "%.5f   %.3f" [$ns now] $apd_queue]
#	puts $queue [format "%.5f   %.3f" [$ns now] $av_qsize]

    
        $binteg reset
        $pinteg reset
        $qmon reset
}




#
# Create Short-lived TCP flows
#
proc build-short-lived { src dest pktSize fid node_id startTime tcp_src tcp_sink transfer_size dctcp} {
	global ns

	set tcp [new Agent/$tcp_src]
	set sink [new Agent/$tcp_sink]
	if {$dctcp} {
		$sink listen
	}
	$ns attach-agent $src $tcp
	$ns attach-agent $dest $sink
	$sink set fid_ fid
	$ns connect $tcp $sink
	$tcp set fid_ $fid
	set ftp [$tcp attach-source FTP]

	$tcp set starts $startTime
	$tcp set sess $fid
	$tcp set node $node_id
	$tcp set packetSize_ $pktSize
	$tcp set size $transfer_size
	$tcp set flow_size [expr $transfer_size/1024]

	$ns at [$tcp set starts] "$ftp send [$tcp set size]"
	return $tcp
}

proc flowLevel { num_hosts num_tors src_ind dst_ind } {

	if { $src_ind/$num_hosts == $dst_ind/$num_hosts } {
		return 1
	} elseif { $src_ind/($num_hosts*$num_tors) == $dst_ind/($num_hosts*$num_tors) } {
		return 2
	} else {
		return 3
	}
}
